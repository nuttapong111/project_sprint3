'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import {
  DocumentTextIcon,
  PaperClipIcon,
  CheckCircleIcon,
  XCircleIcon,
  ArrowUpTrayIcon,
  EyeIcon,
  TrashIcon
} from '@heroicons/react/24/outline';
import Header from '@/components/Header';
import Link from 'next/link';

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
const documentTypes = [
  {
    id: 'building_permit',
    name: '‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£',
    description: '‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°',
    requiredDocuments: [
      '‡πÅ‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ (PDF)',
      '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£ (PDF)',
      '‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô (PDF)',
      '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ó‡∏®‡∏ö‡∏≤‡∏• (PDF)'
    ],
    icon: 'üèóÔ∏è'
  },
  {
    id: 'business_license',
    name: '‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£',
    description: '‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
    requiredDocuments: [
      '‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (PDF/JPG)',
      '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (PDF)',
      '‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (PDF/JPG)',
      '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ (PDF)'
    ],
    icon: 'üè¢'
  },
  {
    id: 'driving_license',
    name: '‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà',
    description: '‡∏Ç‡∏≠‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏',
    requiredDocuments: [
      '‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (PDF/JPG)',
      '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå (PDF)',
      '‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢ 2 ‡∏ô‡∏¥‡πâ‡∏ß (JPG)',
      '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° (PDF)'
    ],
    icon: 'üöó'
  },
  {
    id: 'passport',
    name: '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
    description: '‡∏Ç‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏',
    requiredDocuments: [
      '‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (PDF/JPG)',
      '‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô (PDF/JPG)',
      '‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢ 2 ‡∏ô‡∏¥‡πâ‡∏ß (JPG)',
      '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏π‡∏ï (PDF)'
    ],
    icon: 'üìò'
  },
  {
    id: 'marriage_certificate',
    name: '‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏°‡∏£‡∏™',
    description: '‡∏Ç‡∏≠‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏°‡∏£‡∏™',
    requiredDocuments: [
      '‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (PDF/JPG)',
      '‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô (PDF/JPG)',
      '‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡πà‡∏≤ (PDF) - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ',
      '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ (PDF)'
    ],
    icon: 'üíí'
  }
];

interface DocumentFile {
  id: string;
  name: string;
  file: File;
  type: string;
  size: number;
  preview?: string;
}

interface DocumentSubmission {
  documentType: string;
  files: { [key: string]: DocumentFile };
}

export default function StartDocumentSubmissionPage() {
  const [selectedType, setSelectedType] = useState<string>('');
  const [submission, setSubmission] = useState<DocumentSubmission>({
    documentType: '',
    files: {}
  });
  const [showPreview, setShowPreview] = useState(false);

  const selectedDocumentType = documentTypes.find(type => type.id === selectedType);

  const handleFileUpload = (documentName: string, event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
    if (!allowedTypes.includes(file.type)) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠ JPG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (10MB)
    if (file.size > 10 * 1024 * 1024) {
      alert('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 MB');
      return;
    }

    const fileId = `${documentName}_${Date.now()}`;
    const newFile: DocumentFile = {
      id: fileId,
      name: file.name,
      file,
      type: file.type,
      size: file.size,
      preview: file.type.startsWith('image/') ? URL.createObjectURL(file) : undefined
    };

    setSubmission(prev => ({
      ...prev,
      files: {
        ...prev.files,
        [documentName]: newFile
      }
    }));
  };

  const removeFile = (documentName: string) => {
    setSubmission(prev => {
      const newFiles = { ...prev.files };
      if (newFiles[documentName]?.preview) {
        URL.revokeObjectURL(newFiles[documentName].preview!);
      }
      delete newFiles[documentName];
      return {
        ...prev,
        files: newFiles
      };
    });
  };

  const getFileIcon = (type: string) => {
    if (type.startsWith('image/')) return 'üñºÔ∏è';
    if (type === 'application/pdf') return 'üìÑ';
    return 'üìÅ';
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const isSubmissionComplete = () => {
    if (!selectedDocumentType) return false;
    return selectedDocumentType.requiredDocuments.every(doc => 
      submission.files[doc] !== undefined
    );
  };

  const handleSubmit = () => {
    if (!isSubmissionComplete()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    console.log('Submitting documents:', submission);
    alert('‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
    
    // Reset form
    setSelectedType('');
    setSubmission({ documentType: '', files: {} });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header isLoggedIn={true} userType="citizen" />
      
      <div className="container mx-auto px-4 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="max-w-4xl mx-auto"
        >
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-4">
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏∑‡πà‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
            </h1>
            <p className="text-gray-600">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            </p>
          </div>

          {!selectedType ? (
            /* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠ */
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {documentTypes.map((type) => (
                <motion.div
                  key={type.id}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className="bg-white rounded-lg shadow-md p-6 cursor-pointer border-2 border-transparent hover:border-blue-500 transition-all"
                  onClick={() => setSelectedType(type.id)}
                >
                  <div className="text-center">
                    <div className="text-4xl mb-4">{type.icon}</div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      {type.name}
                    </h3>
                    <p className="text-gray-600 text-sm mb-4">
                      {type.description}
                    </p>
                    <div className="text-blue-600 font-medium">
                      ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°: {type.requiredDocuments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          ) : (
            /* ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */
            <div className="bg-white rounded-lg shadow-md p-6">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center space-x-3">
                  <div className="text-3xl">{selectedDocumentType?.icon}</div>
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">
                      {selectedDocumentType?.name}
                    </h2>
                    <p className="text-gray-600">
                      {selectedDocumentType?.description}
                    </p>
                  </div>
                </div>
                <button
                  onClick={() => {
                    setSelectedType('');
                    setSubmission({ documentType: '', files: {} });
                  }}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <XCircleIcon className="h-6 w-6" />
                </button>
              </div>

              <div className="space-y-6">
                {selectedDocumentType?.requiredDocuments.map((document, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <DocumentTextIcon className="h-5 w-5 text-blue-600" />
                        <span className="font-medium text-gray-900">
                          {document}
                        </span>
                      </div>
                      {submission.files[document] && (
                        <div className="flex items-center space-x-2">
                          <CheckCircleIcon className="h-5 w-5 text-green-500" />
                          <span className="text-sm text-green-600">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</span>
                        </div>
                      )}
                    </div>

                    {!submission.files[document] ? (
                      <label className="flex items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-blue-500 transition-colors">
                        <div className="text-center">
                          <ArrowUpTrayIcon className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                          <p className="text-sm text-gray-600">
                            ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
                          </p>
                          <p className="text-xs text-gray-500 mt-1">
                            PDF ‡∏´‡∏£‡∏∑‡∏≠ JPG (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB)
                          </p>
                        </div>
                        <input
                          type="file"
                          className="hidden"
                          accept=".pdf,.jpg,.jpeg,.png"
                          onChange={(e) => handleFileUpload(document, e)}
                        />
                      </label>
                    ) : (
                      <div className="flex items-center justify-between bg-gray-50 rounded-lg p-3">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">
                            {getFileIcon(submission.files[document].type)}
                          </span>
                          <div>
                            <p className="font-medium text-gray-900">
                              {submission.files[document].name}
                            </p>
                            <p className="text-sm text-gray-500">
                              {formatFileSize(submission.files[document].size)}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {submission.files[document].preview && (
                            <button
                              onClick={() => setShowPreview(true)}
                              className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg"
                            >
                              <EyeIcon className="h-4 w-4" />
                            </button>
                          )}
                          <button
                            onClick={() => removeFile(document)}
                            className="p-2 text-red-600 hover:bg-red-50 rounded-lg"
                          >
                            <TrashIcon className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>

              {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á */}
              <div className="mt-8 p-4 bg-blue-50 rounded-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-semibold text-gray-900">‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h3>
                    <p className="text-sm text-gray-600">
                      ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß {Object.keys(submission.files).length} / {selectedDocumentType?.requiredDocuments.length} ‡πÑ‡∏ü‡∏•‡πå
                    </p>
                  </div>
                  <div className="text-right">
                    <div className="text-2xl font-bold text-blue-600">
                      {Math.round((Object.keys(submission.files).length / (selectedDocumentType?.requiredDocuments.length || 1)) * 100)}%
                    </div>
                    <div className="text-sm text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</div>
                  </div>
                </div>
                
                <div className="mt-4">
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                      style={{ 
                        width: `${(Object.keys(submission.files).length / (selectedDocumentType?.requiredDocuments.length || 1)) * 100}%` 
                      }}
                    ></div>
                  </div>
                </div>
              </div>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á */}
              <div className="mt-6 flex justify-end space-x-4">
                <button
                  onClick={() => {
                    setSelectedType('');
                    setSubmission({ documentType: '', files: {} });
                  }}
                  className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  onClick={handleSubmit}
                  disabled={!isSubmissionComplete()}
                  className={`px-6 py-2 rounded-lg font-medium ${
                    isSubmissionComplete()
                      ? 'bg-blue-600 text-white hover:bg-blue-700'
                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                </button>
              </div>
            </div>
          )}

          {/* ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
          <div className="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
            <h3 className="font-semibold text-yellow-800 mb-3">‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h3>
            <ul className="space-y-2 text-sm text-yellow-700">
              <li className="flex items-start space-x-2">
                <CheckCircleIcon className="h-4 w-4 mt-0.5 text-yellow-600" />
                <span>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡πà‡∏ô</span>
              </li>
              <li className="flex items-start space-x-2">
                <CheckCircleIcon className="h-4 w-4 mt-0.5 text-yellow-600" />
                <span>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö PDF ‡∏´‡∏£‡∏∑‡∏≠ JPG</span>
              </li>
              <li className="flex items-start space-x-2">
                <CheckCircleIcon className="h-4 w-4 mt-0.5 text-yellow-600" />
                <span>‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 MB ‡∏ï‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå</span>
              </li>
            </ul>
          </div>
        </motion.div>
      </div>
    </div>
  );
}
